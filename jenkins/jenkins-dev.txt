pipeline {
    agent any
    tools {
        maven 'maven-3.8.6'
        nodejs 'node-18.16.1'
    }

    environment {
        REMOTE_SERVER = "172.31.14.253" // server IP
        CONTAINER_NAME = 'turbomobile'
        AWS_REGION = 'us-east-1' // Replace with your desired AWS region
        ECR_REPO = 'poc-turbo' // Replace with your ECR repository name
    }

    stages {
       
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonarqubeserver') {
                    withMaven(maven:'maven-3.8.6') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Maven code Build') {
            steps {
                sh 'mvn clean install -Dprofile.props.file="dev.properties"'
            }
        } // end of maven build steps

        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = "${env.ECR_REPO}:DEV-turbomobile.${env.BUILD_NUMBER}"
                    def dockerfile = readFile 'Dockerfile'
                    writeFile file: 'Dockerfile', text: dockerfile
                    sh "docker buildx build --tag=$imageTag ."
                }
            }
        } // end of docker image build steps

        stage('Push to AWS Registry') {
            steps {
                script {
                    def imageTag = "DEV-turbomobile.${env.BUILD_NUMBER}"

                    withAWS(region: AWS_REGION, credentials: 'wm-ps-user-ecr') {
                        def awsAccountID = sh(returnStdout: true, script: "aws sts get-caller-identity --query Account --output text").trim()
                        def ecrLogin = sh(returnStdout: true, script: "aws ecr get-login --no-include-email --region ${AWS_REGION}")
                        sh "${ecrLogin}"
                        sh "docker tag ${ECR_REPO}:$imageTag ${awsAccountID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:$imageTag"
                        sh "docker push ${awsAccountID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:$imageTag"
                    }
                }
            }
        } // end of docker hub image push step

        stage('Deploy Docker Container') {
            steps {
                script {
                    IMAGE_TAG = "DEV-turbomobile.${env.BUILD_NUMBER}"

                    sshagent(['prod-deployment-ssh-details']) {
                        withAWS(region: AWS_REGION, credentials: 'wm-ps-user-ecr') {
                            def awsAccountID = sh(returnStdout: true, script: "aws sts get-caller-identity --query Account --output text").trim()

                            def containerExists = sh(returnStdout: true, script: "ssh -o StrictHostKeyChecking=no ubuntu@${env.REMOTE_SERVER} 'docker ps -a --filter name=${env.CONTAINER_NAME} --format \"{{.Names}}\"'")

                            if (containerExists.trim() != '') {
                                sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.REMOTE_SERVER} 'docker rm -f ${env.CONTAINER_NAME}'"
                                echo "container deleted ${env.CONTAINER_NAME}"
                            }

                            def ecrLogin = sh(returnStdout: true, script: "aws ecr get-login --no-include-email --region ${AWS_REGION}")
                            sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.REMOTE_SERVER} '${ecrLogin}'"
                            sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.REMOTE_SERVER} 'docker pull ${awsAccountID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}'"
                            sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.REMOTE_SERVER} 'docker run -d --name ${env.CONTAINER_NAME} -p 8025:8080 -p 8034:8443 -v /data/ssl/.keystorenew:/usr/local/tomcat/conf/.keystorenew -v /data/ssl/server.xml:/usr/local/tomcat/conf/server.xml ${awsAccountID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}'"
                        } // aws close
                    } // ssh close
                } // script close
            } // step close
        } // end of docker container deployment stage
    } // stages close
} // pipeline close
